
#include <assert.h>
#include <stdio.h>

#include <Inventor/SbVec3f.h>
#include <Inventor/SoDB.h>
#include <Inventor/SoPath.h>
#include <Inventor/nodes/SoSeparator.h>
#include <Inventor/nodes/SoRotor.h>
#include <Inventor/nodes/SoCube.h>
#include <Inventor/nodes/SoTranslation.h>
#include <Inventor/nodes/SoMaterial.h>
#include <Inventor/nodes/SoDirectionalLight.h>
#include <Inventor/nodes/SoPerspectiveCamera.h>

#include <Inventor/@Gui@/So@Gui@.h>
#include <Inventor/@Gui@/So@Gui@RenderArea.h>

#include <NutsnBolts/NutsnBolts.h>
#include <NutsnBolts/NbSceneManager.h>
#include <NutsnBolts/navigation/NbNavigationMode.h>
#include <NutsnBolts/navigation/NbNavigationSystem.h>
#include <NutsnBolts/navigation/NbPickMode.h>

// *************************************************************************

static NbNavigationSystem * navigationsystem = NULL;

void
modechange(void * closure, NbNavigationSystem * system)
{
  fprintf(stderr, "mode change: %s\n",
    system->getCurrentModeName().getString());
}

void
pick_cb(void * closure, const SbVec3f & pos, const SoPath * path)
{
  fprintf(stderr, "pick: <%f %f %f>  [%s]\n",
          pos[0], pos[1], pos[2], path->getTail()->getTypeId().getName().getString());
  SoPath * copy = path->copy();
  copy->ref();
  navigationsystem->viewPart(copy, SbVec3f(0, 1, 0), SbVec3f(0, 0, 1));
  copy->unref();
}

static
SoSeparator *
newSoCubeGraph(void)
{
  static int counter = 0;
  counter++;
  SoSeparator * sep = new SoSeparator;
  SoMaterial * mat = new SoMaterial;
  mat->diffuseColor.setValue(counter & 0x1 ? 1.0 : 0.0,
                             counter & 0x2 ? 1.0 : 0.0,
                             counter & 0x4 ? 1.0 : 0.0);
  sep->addChild(mat);
  sep->addChild(new SoCube);
  return sep;
}

int
main(int argc, char ** argv)
{
  @WIDGET@ toplevel = So@Gui@::init("test", "test");
  NutsnBolts::init();

  So@Gui@RenderArea * ra = new So@Gui@RenderArea(NULL);
  ra->show();
  // So@Gui@::show(toplevel);

  NbSceneManager * sm = new NbSceneManager;
  sm->activate();
  ra->setSceneManager(sm);

  sm->setNavigationState(NbSceneManager::JUST_NAVIGATION);

#if 1
  NbNavigationSystem * nav =
    NbNavigationSystem::createByName(NB_EXAMINER_SYSTEM);
  assert(nav);
#else // PICKER EXAMPLE
  NbNavigationSystem * nav =
    NbNavigationSystem::createByName(NB_PICKER_SYSTEM);
  assert(nav);
	NbNavigationMode * mode = nav->getMode(NB_PICKER_PICK_MODE);
  assert(mode);
  NbPickMode * pickmode = (NbPickMode *) mode;
  pickmode->addPickCallback(pick_cb, NULL);
#endif

  nav->addModeChangeCallback(modechange, NULL);
  sm->setNavigationSystem(nav);
  navigationsystem = nav;

  SoSeparator * scene = new SoSeparator;
  scene->ref();
  SoDirectionalLight * light = new SoDirectionalLight;
  SoPerspectiveCamera * camera = new SoPerspectiveCamera;
  light->direction.setValue(SbVec3f(0.5, 0.5, -1.0));
  light->intensity.setValue(1.0);
  SoRotor * rotor = new SoRotor;
  rotor->speed.setValue(0.5);
  scene->addChild(light);
  scene->addChild(camera);
  // scene->addChild(rotor);
  scene->addChild(newSoCubeGraph());
  int i;
  for ( i = 0; i < 7; i++ ) {
    SoTranslation * trans = new SoTranslation;
    trans->translation.setValue(3,0,0);
    scene->addChild(trans);
    scene->addChild(newSoCubeGraph());
  }

  camera->position.setValue(0, 0, -50);
  camera->pointAt(SbVec3f(0, 0, 0));
  camera->viewAll(scene, sm->getViewportRegion(), 0.001f);

  ra->setSceneGraph(scene);
  scene->unref();
  scene = NULL;
  ra->scheduleRedraw();

  ra->setSize(SbVec2s(300, 300));

  So@Gui@::mainLoop();

  sm->setNavigationSystem(NULL);
  delete nav;
  delete sm;

  return 0;
}

// *************************************************************************
